import asyncio
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Text, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

# Замените на свой токен бота
BOT_TOKEN = ""

# Настройка логирования
logging.basicConfig(level=logging.INFO)

# Инициализация бота и диспетчера
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

#  Временное хранилище данных (в реальном проекте используйте БД)
user_data = {}


# --- Определение состояний ---
class UserForm(StatesGroup):
    goal = State()
    level = State()
    preferences = State()  # Виды спорта, оборудование
    track_progress = State()


# --- Обработчики команд ---

@dp.message(CommandStart())
async def command_start_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "Привет! Я бот, который поможет тебе составить индивидуальный план тренировок.\n"
        "Какова твоя цель?",
        reply_markup=get_goal_keyboard(),
    )
    await state.set_state(UserForm.goal)


# --- Обработчики выбора цели ---

def get_goal_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="Похудение", callback_data="goal:похудение")
    builder.button(text="Набор массы", callback_data="goal:набор_массы")
    builder.button(text="Поддержание формы", callback_data="goal:поддержание_формы")
    builder.adjust(1)
    return builder.as_markup()


@dp.callback_query(UserForm.goal, Text(startswith="goal:"))
async def process_goal(callback: types.CallbackQuery, state: FSMContext):  # Text используется здесь
    goal = callback.data.split(":")[1]
    await state.update_data(goal=goal)
    await callback.message.edit_text(f"Твоя цель: {goal}\n"
                                      f"Какой у тебя уровень подготовки?",
                                      reply_markup=get_level_keyboard())
    await state.set_state(UserForm.level)
    await callback.answer()


# --- Обработчики выбора уровня подготовки ---
def get_level_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="Начинающий", callback_data="level:начинающий")
    builder.button(text="Средний", callback_data="level:средний")
    builder.button(text="Продвинутый", callback_data="level:продвинутый")
    builder.adjust(1)
    return builder.as_markup()


@dp.callback_query(UserForm.level, Text(startswith="level:"))
async def process_level(callback: types.CallbackQuery, state: FSMContext):  # Text используется здесь
    level = callback.data.split(":")[1]
    await state.update_data(level=level)
    await callback.message.edit_text(f"Твой уровень: {level}\n"
                                      f"Какие у тебя предпочтения по видам спорта и доступному оборудованию? (Напиши текстом, через запятую)",
                                      reply_markup=None)  # Убираем клавиатуру
    await state.set_state(UserForm.preferences)
    await callback.answer()


# --- Обработчик ввода предпочтений ---

@dp.message(UserForm.preferences)
async def process_preferences(message: types.Message, state: FSMContext):
    preferences = message.text
    await state.update_data(preferences=preferences)
    data = await state.get_data()
    goal = data["goal"]
    level = data["level"]
    preferences_text = data["preferences"]

    # Генерируем план тренировок (заглушка)
    training_plan = generate_training_plan(goal, level, preferences_text)

    await message.answer(f"Отлично! Вот твой индивидуальный план тренировок:\n\n{training_plan}\n\n"
                         f"Хочешь отслеживать свой прогресс? (да/нет)")
    await state.set_state(UserForm.track_progress)


# --- Обработчик отслеживания прогресса ---
@dp.message(UserForm.track_progress, Text(text=["да", "нет"], ignore_case=True))
async def process_track_progress(message: types.Message, state: FSMContext):  # Text используется здесь
    track_progress = message.text.lower() == "да"
    data = await state.get_data()
    user_id = message.from_user.id
    user_data[user_id] = data
    user_data[user_id]["track_progress"] = track_progress

    await message.answer("Спасибо! Твои данные сохранены.\n"
                         "Напиши /help для списка команд.")
    await state.clear()

# --- Обработчик неправильного ввода отслеживания прогресса ---
@dp.message(UserForm.track_progress)
async def process_invalid_track_progress(message: types.Message, state: FSMContext):
    await message.answer("Пожалуйста, ответьте 'да' или 'нет'.")

# --- Заглушка для генерации плана тренировок ---

def generate_training_plan(goal, level, preferences):
    # Здесь должна быть логика генерации плана тренировок
    # с учетом цели, уровня и предпочтений.
    # В реальном проекте здесь будет сложный алгоритм или интеграция с API.

    plan = f"План тренировок для {goal}, уровень: {level}\n"
    plan += f"Предпочтения: {preferences}\n\n"

    if goal == "похудение":
        plan += "- Кардио 3 раза в неделю по 30 минут.\n"
        plan += "- Силовые тренировки 2 раза в неделю.\n"
        plan += "- Следить за питанием.\n"
    elif goal == "набор_массы":
        plan += "- Силовые тренировки 3-4 раза в неделю.\n"
        plan += "- Увеличение калорийности питания.\n"
        plan += "- Отдых и восстановление.\n"
    else:  # Поддержание формы
        plan += "- Разнообразные тренировки 2-3 раза в неделю.\n"
        plan += "- Поддержание здорового питания.\n"

    plan += "\n(Это примерный план, он может быть изменен)"

    return plan

# --- Обработчик команды /help ---
@dp.message(commands=["help"])
async def command_help_handler(message: types.Message):
    help_text = (
        "Доступные команды:\n"
        "/start - Начать работу с ботом\n"
        "/help - Показать это сообщение\n"
        "/mydata - Показать твои текущие данные\n" # Добавлена команда
    )
    await message.answer(help_text)

# --- Обработчик команды /mydata ---
@dp.message(commands=["mydata"])
async def command_mydata_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_data:
        data = user_data[user_id]
        data_text = (
            "Твои данные:\n"
            f"Цель: {data['goal']}\n"
            f"Уровень подготовки: {data['level']}\n"
            f"Предпочтения: {data['preferences']}\n"
            f"Отслеживание прогресса: {'Да' if data['track_progress'] else 'Нет'}"
        )
        await message.answer(data_text)
    else:
        await message.answer("У тебя пока нет данных. Начни с /start")

# --- Функция запуска бота ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

import asyncio
import logging
import random

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = '7865904225:AAEH69ydXI-GWLZ3vdDwFdIFLidkGdaKSAE'

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# *** –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç URL –Ω–∞ URL —Å–≤–æ–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏! ***
START_IMAGE = "https://avatars.mds.yandex.net/i?id=c8da6dc7e23d51b528d62f4f8abbdcdf-5233615-images-thumbs&n=13"

# --- –†–∞—Å—ã –ø–∏—Ç–æ–º—Ü–µ–≤ ---
PET_RACES = {
    "dog": {
        "name": "–°–æ–±–∞–∫–∞",
        "emoji": "üê∂",
        "image": "https://avatars.mds.yandex.net/i?id=bc7abc350c7fdc7885c647775419fcd9d9acf3c0-3612059-images-thumbs&n=13",  # –ó–∞–º–µ–Ω–∏—Ç–µ!
        "hunger_rate": 1.0,  # 1.0 - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≥–æ–ª–æ–¥–∞
        "happiness_gain": 1.2  # 1.2 - –ø–æ–≤—ã—à–µ–Ω–Ω–æ–µ —Å—á–∞—Å—Ç—å–µ –æ—Ç –∏–≥—Ä
    },
    "cat": {
        "name": "–ö–æ—à–∫–∞",
        "emoji": "üê±",
        "image": "https://avatars.mds.yandex.net/i?id=0068dc4b84dd0d5549ba6b5140059ab7-5669151-images-thumbs&n=13",  # –ó–∞–º–µ–Ω–∏—Ç–µ!
        "hunger_rate": 0.8,  # –ú–µ–Ω—å—à–µ –≥–æ–ª–æ–¥–∞–µ—Ç
        "happiness_gain": 1.0
    },
    "rabbit": {
        "name": "–ö—Ä–æ–ª–∏–∫",
        "emoji": "üê∞",
        "image": "https://avatars.mds.yandex.net/i?id=2c37950a93d2ee7c32e6e6be343df69dc868ee2f-4918066-images-thumbs&n=13",  # –ó–∞–º–µ–Ω–∏—Ç–µ!
        "hunger_rate": 1.2,  # –ë–æ–ª—å—à–µ –≥–æ–ª–æ–¥–∞–µ—Ç
        "happiness_gain": 0.8  # –ú–µ–Ω—å—à–µ —Å—á–∞—Å—Ç—å—è –æ—Ç –∏–≥—Ä
    },
    "fox": {
        "name": "–õ–∏—Å–∞",
        "emoji": "ü¶ä",
        "image": "https://avatars.mds.yandex.net/i?id=cd1c6501ce2696c6d1ef86f12a4ff671eb2b916c-5433213-images-thumbs&n=13",  # –ó–∞–º–µ–Ω–∏—Ç–µ!
        "hunger_rate": 1.1,
        "happiness_gain": 1.1
    },
}

# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ ---
class Pet:
    def __init__(self, name, race):
        self.name = name
        self.race = race
        self.hunger = 50
        self.happiness = 50
        self.level = 1
        self.experience = 0
        self.is_sleeping = False
        self.hunger_rate = PET_RACES[race]["hunger_rate"]
        self.happiness_gain = PET_RACES[race]["happiness_gain"]

    def feed(self):
        if self.is_sleeping:
            return "–ü–∏—Ç–æ–º—Ü–∞ —Å–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –∫–æ—Ä–º–∏—Ç—å, –æ–Ω —Å–ø–∏—Çüò¥"

        feed_amount = int(random.randint(15, 25) * self.hunger_rate)  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –µ–¥–µ
        happiness_increase = random.randint(5, 10)
        self.hunger = min(100, self.hunger + feed_amount)
        self.happiness = min(100, self.happiness + happiness_increase)
        self.add_experience(5)
        return f"–ü–æ–∫–æ—Ä–º–∏–ª! –ú–º–º, –≤–∫—É—Å–Ω–æ! üòã –ì–æ–ª–æ–¥ +{feed_amount}, –°—á–∞—Å—Ç—å–µ +{happiness_increase}, –û–ø—ã—Ç +5"

    def pet(self):
        if self.is_sleeping:
            return "–ü–∏—Ç–æ–º—Ü–∞ —Å–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –≥–ª–∞–¥–∏—Ç—å, –æ–Ω —Å–ø–∏—Çüò¥"

        pet_amount = random.randint(5, 10)
        self.happiness = min(100, self.happiness + pet_amount)
        self.add_experience(3)
        return f"–ü–æ–≥–ª–∞–¥–∏–ª! –ü–∏—Ç–æ–º—Ü—É –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å! üòä –°—á–∞—Å—Ç—å–µ +{pet_amount}, –û–ø—ã—Ç +3"

    def sleep(self):
        if self.is_sleeping:
            return "–ü–∏—Ç–æ–º–µ—Ü —É–∂–µ —Å–ø–∏—Ç üò¥"
        self.is_sleeping = True
        self.hunger = max(0, int(self.hunger - 5 * self.hunger_rate))  # –ì–æ–ª–æ–¥ –≤–æ –≤—Ä–µ–º—è —Å–Ω–∞
        return "–ü–∏—Ç–æ–º–µ—Ü —É—Å–Ω—É–ª! üò¥"

    def wake_up(self):
        if not self.is_sleeping:
            return "–ü–∏—Ç–æ–º–µ—Ü –∏ —Ç–∞–∫ –Ω–µ —Å–ø–∏—Ç üò†"
        self.is_sleeping = False
        self.happiness = min(100, self.happiness + 10)
        return "–ü–∏—Ç–æ–º–µ—Ü –ø—Ä–æ—Å–Ω—É–ª—Å—è! ü•∞"

    def status(self):
        hunger_emoji = "üçñ" * (self.hunger // 10) + "ü¶¥" * ((100 - self.hunger) // 10)
        happiness_emoji = "üòÉ" * (self.happiness // 10) + "üôÅ" * ((100 - self.happiness) // 10)
        sleeping_status = "üò¥" if self.is_sleeping else ""
        race_emoji = PET_RACES[self.race]["emoji"]

        return (
            f"–†–∞—Å–∞: {PET_RACES[self.race]['name']} {race_emoji}\n"
            f"–£—Ä–æ–≤–µ–Ω—å: {self.level} üåü\n"
            f"–û–ø—ã—Ç: {self.experience}\n"
            f"–ì–æ–ª–æ–¥: {self.hunger}% {hunger_emoji}\n"
            f"–°—á–∞—Å—Ç—å–µ: {self.happiness}% {happiness_emoji} {sleeping_status}"
        )

    def add_experience(self, amount):
        self.experience += amount
        self.check_level_up()

    def check_level_up(self):
        required_experience = self.level * 100
        if self.experience >= required_experience:
            self.level += 1
            self.experience -= required_experience
            return f"üéâ –ü–∏—Ç–æ–º–µ—Ü –¥–æ—Å—Ç–∏–≥ {self.level} —É—Ä–æ–≤–Ω—è!"
        return None

    def get_available_games(self):
        available_games = []
        if self.level >= 1:
            available_games.append('fetch')
        if self.level >= 3:
            available_games.append('tickle')
        if self.level >= 5:
            available_games.append('puzzle')
        if self.level >= 7:
            available_games.append('guess_number')  # –ù–æ–≤–∞—è –∏–≥—Ä–∞
        if self.level >= 9:
            available_games.append('quiz')  # –ù–æ–≤–∞—è –∏–≥—Ä–∞
        return available_games

    def play_tickle(self):
        play_amount = int(random.randint(20, 30) * self.happiness_gain)  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏—Ä–æ—Å—Ç —Å—á–∞—Å—Ç—å—è –æ—Ç —Ä–∞—Å—ã
        hunger_decrease = int(random.randint(3, 7) * self.hunger_rate)  # –ì–æ–ª–æ–¥ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞—Å—ã
        self.happiness = min(100, self.happiness + play_amount)
        self.hunger = max(0, self.hunger - hunger_decrease)
        self.add_experience(12)
        return f"–ü–æ—â–µ–∫–æ—Ç–∞–ª–∏ –ø–∏—Ç–æ–º—Ü–∞! ü§£ –°—á–∞—Å—Ç—å–µ +{play_amount}, –ì–æ–ª–æ–¥ -{hunger_decrease}, –û–ø—ã—Ç +12"

# --- FSM –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—ã ---
class PetRace(StatesGroup):
    waiting_for_race = State()

# --- FSM –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä ---
class GameState(StatesGroup):
    waiting_for_answer = State()
    waiting_for_number = State()  # –î–ª—è –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
    waiting_for_quiz_answer = State()  # –î–ª—è –∏–≥—Ä—ã "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞"

# --- FSM –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞ ---
class PetName(StatesGroup):
    waiting_for_name = State()

current_game = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
my_pet = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ Pet
secret_number = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞

# --- –ù–æ–≤—ã–µ –∏–≥—Ä—ã ---

async def start_guess_number_game(message: types.Message, state: FSMContext):
    global current_game, secret_number
    current_game = "guess_number"
    secret_number = random.randint(1, 100)  # –ó–∞–≥–∞–¥—ã–≤–∞–µ–º —á–∏—Å–ª–æ
    await message.reply("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!")
    await state.set_state(GameState.waiting_for_number)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —á–∏—Å–ª–∞

async def start_quiz_game(message: types.Message, state: FSMContext):
    global current_game
    current_game = "quiz"
    question = "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2?"
    builder = InlineKeyboardBuilder()
    builder.button(text="3", callback_data="quiz_3")
    builder.button(text="4", callback_data="quiz_4")
    builder.button(text="5", callback_data="quiz_5")
    await message.reply(question, reply_markup=builder.as_markup())
    await state.set_state(GameState.waiting_for_quiz_answer)

@dp.message(GameState.waiting_for_number)
async def process_guess_number(message: types.Message, state: FSMContext):
    global current_game, secret_number

    if current_game != "guess_number":
        return  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞

    try:
        guess = int(message.text)
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    if guess < secret_number:
        await message.reply("–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ.")
    elif guess > secret_number:
        await message.reply("–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ.")
    else:
        play_amount = int(random.randint(25, 35) * my_pet.happiness_gain)  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏—Ä–æ—Å—Ç —Å—á–∞—Å—Ç—å—è –æ—Ç —Ä–∞—Å—ã
        my_pet.happiness = min(100, my_pet.happiness + play_amount)
        my_pet.add_experience(20)
        level_up_message = my_pet.check_level_up()
        result_message = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {secret_number}! üòÑ –°—á–∞—Å—Ç—å–µ +{play_amount}, –û–ø—ã—Ç +20"
        if level_up_message:
            result_message += "\n" + level_up_message
        await message.reply(result_message)
        current_game = None
        secret_number = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        await state.clear()
        await show_main_menu(message)

@dp.callback_query(GameState.waiting_for_quiz_answer, lambda c: c.data.startswith("quiz_"))
async def process_quiz_answer(callback: CallbackQuery, state: FSMContext):
    global current_game

    if current_game != "quiz":
        return  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞

    answer = callback.data.split("_")[1]
    if answer == "4":
        play_amount = int(random.randint(15, 25) * my_pet.happiness_gain)  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏—Ä–æ—Å—Ç —Å—á–∞—Å—Ç—å—è –æ—Ç —Ä–∞—Å—ã
        my_pet.happiness = min(100, my_pet.happiness + play_amount)
        my_pet.add_experience(15)
        level_up_message = my_pet.check_level_up()
        result_message = f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! 2 + 2 = 4! üéâ –°—á–∞—Å—Ç—å–µ +{play_amount}, –û–ø—ã—Ç +15"
        if level_up_message:
            result_message += "\n" + level_up_message
        await callback.message.answer(result_message)
    else:
        await callback.message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")

    current_game = None
    await state.clear()
    await show_main_menu(callback.message)

async def start_puzzle_game(message: types.Message, state: FSMContext):
    global current_game
    current_game = "puzzle"
    puzzle_question = "–ö–∞–∫–∞—è —Ñ–∏–≥—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–µ–π: –ö–≤–∞–¥—Ä–∞—Ç, –ö—Ä—É–≥, –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫, –ö–≤–∞–¥—Ä–∞—Ç, –ö—Ä—É–≥, ...?"
    builder = InlineKeyboardBuilder()
    builder.button(text="–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫", callback_data="puzzle_–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫")
    builder.button(text="–ö–≤–∞–¥—Ä–∞—Ç", callback_data="puzzle_–ö–≤–∞–¥—Ä–∞—Ç")
    builder.button(text="–ö—Ä—É–≥", callback_data="puzzle_–ö—Ä—É–≥")
    await message.answer(
        puzzle_question,
        reply_markup=builder.as_markup()
    )
    await state.set_state(GameState.waiting_for_answer)

async def start_fetch_game(message: types.Message, state: FSMContext):
    global current_game
    current_game = "fetch"
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ –∞–ø–æ—Ä—Ç
    # –ó–∞–º–µ–Ω–∏—Ç–µ URL –Ω–∞ —Ä–∞–±–æ—á–∏–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!
    try:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo="https://www.easygifanimator.net/images/samples/video-to-gif-sample.gif",  # –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ URL (GIF)
            caption="–ë—Ä–æ—Å—å –º—è—á–∏–∫! –ù–∞–ø–∏—à–∏ '–±—Ä–æ—Å–∏–ª', –∫–æ–≥–¥–∞ –±—Ä–æ—Å–∏—à—å."
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –ê–ø–æ—Ä—Ç.  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")  # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
        await show_main_menu(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()

    await state.set_state(GameState.waiting_for_answer)

@dp.message(GameState.waiting_for_answer)
async def process_answer(message: types.Message, state: FSMContext):
    global current_game
    logging.info(f"process_answer: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    logging.info(f"process_answer: –¢–µ–∫—É—â–∞—è –∏–≥—Ä–∞: {current_game}")

    if current_game == "fetch":
        if message.text.lower() == "–±—Ä–æ—Å–∏–ª":
            play_amount = int(random.randint(15, 25) * my_pet.happiness_gain)  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏—Ä–æ—Å—Ç —Å—á–∞—Å—Ç—å—è –æ—Ç —Ä–∞—Å—ã
            hunger_decrease = int(random.randint(5, 10) * my_pet.hunger_rate)  # –ì–æ–ª–æ–¥ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞—Å—ã
            my_pet.happiness = min(100, my_pet.happiness + play_amount)
            my_pet.hunger = max(0, my_pet.hunger - hunger_decrease)
            my_pet.add_experience(15)
            level_up_message = my_pet.check_level_up()
            result_message = f"–û—Ç–ª–∏—á–Ω–æ, –ø–æ–∏–≥—Ä–∞–ª–∏ –≤ –∞–ø–æ—Ä—Ç! üéæ –°—á–∞—Å—Ç—å–µ +{play_amount}, –ì–æ–ª–æ–¥ -{hunger_decrease}, –û–ø—ã—Ç +15"
            if level_up_message:
                result_message += "\n" + level_up_message

            await message.reply(result_message)
        else:
            await message.reply("–ù–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏ '–±—Ä–æ—Å–∏–ª', –∫–æ–≥–¥–∞ –±—Ä–æ—Å–∏—à—å –º—è—á–∏–∫.")
    elif current_game == "puzzle":
        # –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞–∑–ª–∞ –∑–¥–µ—Å—å (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
        await message.reply("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∑–ª–∞ –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
    current_game = None
    await state.clear()
    await show_main_menu(message)

@dp.callback_query(GameState.waiting_for_answer, lambda c: c.data.startswith("puzzle_"))
async def process_puzzle_answer(callback: CallbackQuery, state: FSMContext):
    global current_game
    answer = callback.data.split("_")[1]
    if answer == "–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫":
        play_amount = int(random.randint(10, 20) * my_pet.happiness_gain) # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏—Ä–æ—Å—Ç —Å—á–∞—Å—Ç—å—è –æ—Ç —Ä–∞—Å—ã
        hunger_decrease = int(random.randint(2, 5) * my_pet.hunger_rate)  # –ì–æ–ª–æ–¥ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞—Å—ã
        my_pet.happiness = min(100, my_pet.happiness + play_amount)
        my_pet.hunger = max(0, my_pet.hunger - hunger_decrease)
        my_pet.add_experience(18)
        level_up_message = my_pet.check_level_up()
        result_message = f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–∏–≥—Ä–∞–ª–∏ –≤ –ø–∞–∑–ª! üß© –°—á–∞—Å—Ç—å–µ +{play_amount}, –ì–æ–ª–æ–¥ -{hunger_decrease}, –û–ø—ã—Ç +18"
        if level_up_message:
            result_message += "\n" + level_up_message

        await callback.message.answer(result_message)
    else:
        await callback.message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")

    current_game = None
    await state.clear()
    await show_main_menu(callback.message)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    buttons = []
    for race_key, race_data in PET_RACES.items():
        buttons.append(InlineKeyboardButton(
            text=f"{race_data['name']} {race_data['emoji']}",
            callback_data=f"race_{race_key}"
        ))
    builder.row(*buttons)  # Put all buttons in a single row

    try:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=START_IMAGE,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
            caption="–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –ø–æ—Ä–æ–¥—É –¥–ª—è —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.error(f"Error sending photo: {e}")
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.set_state(PetRace.waiting_for_race)

@dp.callback_query(PetRace.waiting_for_race, lambda c: c.data.startswith("race_"))
async def process_pet_race(callback: types.CallbackQuery, state: FSMContext):
    race = callback.data.split("_")[1]
    if race in PET_RACES:
        await state.update_data(pet_race=race)
        await bot.answer_callback_query(callback.id)
        data = await state.get_data()
        if data.get("last_message"):
            try:
                await bot.delete_message(chat_id=callback.message.chat.id, message_id=data["last_message"])
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        try:
            msg = await bot.send_photo(
                chat_id=callback.message.chat.id,
                photo=PET_RACES[race]["image"],
                caption=f"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –¢–µ–ø–µ—Ä—å –¥–∞–π –∏–º—è —Å–≤–æ–µ–º—É {PET_RACES[race]['name'].lower()}!"
            )
            await state.update_data(last_message=msg.message_id)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            await bot.send_message(callback.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")

        await state.set_state(PetName.waiting_for_name)
    else:
        await bot.send_message(callback.from_user.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        await state.clear()
        await show_main_menu(callback.message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞
@dp.message(PetName.waiting_for_name)
async def get_pet_name(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(pet_name=name)
    data = await state.get_data()
    global my_pet
    my_pet = Pet(name, data["pet_race"])  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Pet –∑–¥–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∏–º—è –∏ —Ä–∞—Å—É –∏–∑ FSM.
    await message.reply(f"–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∑–æ–≤—É—Ç {my_pet.name}!")
    await state.clear()
    await show_main_menu(message)

async def show_main_menu(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ–∫–æ—Ä–º–∏—Ç—å", callback_data="feed")
    builder.button(text="–ò–≥—Ä–∞—Ç—å", callback_data="play")
    builder.button(text="–ü–æ–≥–ª–∞–¥–∏—Ç—å", callback_data="pet")
    builder.button(text="–£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å", callback_data="sleep")
    builder.button(text="–†–∞–∑–±—É–¥–∏—Ç—å", callback_data="wake_up")
    builder.button(text="–°—Ç–∞—Ç—É—Å", callback_data="status")
    await message.answer(
        "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å –ø–∏—Ç–æ–º—Ü–µ–º?",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data == "feed")
async def feed_callback(callback: types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    message = my_pet.feed()
    level_up_message = my_pet.check_level_up()
    if level_up_message:
        message += "\n" + level_up_message
    await bot.send_message(callback.from_user.id, message)
    await show_main_menu(callback.message)

@dp.callback_query(lambda c: c.data == "play")
async def play_callback(callback: types.CallbackQuery, state: FSMContext):
    available_games = my_pet.get_available_games()
    if not available_games:
        await bot.answer_callback_query(callback.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è!")
        await bot.send_message(callback.from_user.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è! üôÅ")
        await show_main_menu(callback.message)
        return

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
    builder = InlineKeyboardBuilder()
    buttons = []
    if 'fetch' in available_games:
        buttons.append(InlineKeyboardButton(text="–ê–ø–æ—Ä—Ç", callback_data="start_fetch"))
    if 'puzzle' in available_games:
        buttons.append(InlineKeyboardButton(text="–ü–∞–∑–ª", callback_data="start_puzzle"))
    if 'tickle' in available_games:
        buttons.append(InlineKeyboardButton(text="–©–µ–∫–æ—Ç–∫–∞", callback_data="tickle"))
    if 'guess_number' in available_games:
        buttons.append(InlineKeyboardButton(text="–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", callback_data="start_guess_number"))  # –ù–æ–≤–∞—è –∏–≥—Ä–∞
    if 'quiz' in available_games:
        buttons.append(InlineKeyboardButton(text="–í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="start_quiz"))  # –ù–æ–≤–∞—è –∏–≥—Ä–∞

    # row() –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
    builder.row(*buttons)

    await bot.answer_callback_query(callback.id)
    await bot.send_message(callback.from_user.id, "–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:", reply_markup=builder.as_markup())

@dp.callback_query(lambda c: c.data == "start_fetch")
async def fetch_callback(callback: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    await start_fetch_game(callback.message, state)

@dp.callback_query(lambda c: c.data == "start_puzzle")
async def puzzle_callback(callback: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    await start_puzzle_game(callback.message, state)

@dp.callback_query(lambda c: c.data == "tickle")
async def tickle_callback(callback: types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    message = my_pet.play_tickle()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –∏–≥—Ä—É
    level_up_message = my_pet.check_level_up()
    if level_up_message:
        message += "\n" + level_up_message
    await bot.send_message(callback.from_user.id, message)
    await show_main_menu(callback.message)

@dp.callback_query(lambda c: c.data == "start_guess_number")
async def guess_number_callback(callback: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    await start_guess_number_game(callback.message, state)

@dp.callback_query(lambda c: c.data == "start_quiz")
async def quiz_callback(callback: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    await start_quiz_game(callback.message, state)

@dp.callback_query(lambda c: c.data == "pet")
async def pet_callback(callback: types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    message = my_pet.pet()
    level_up_message = my_pet.check_level_up()
    if level_up_message:
        message += "\n" + level_up_message
    await bot.send_message(callback.from_user.id, message)
    await show_main_menu(callback.message)

@dp.callback_query(lambda c: c.data == "sleep")
async def sleep_callback(callback: types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    message = my_pet.sleep()
    await bot.send_message(callback.from_user.id, message)
    await show_main_menu(callback.message)

@dp.callback_query(lambda c: c.data == "wake_up")
async def wake_up_callback(callback: types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    message = my_pet.wake_up()
    await bot.send_message(callback.from_user.id, message)
    await show_main_menu(callback.message)

@dp.callback_query(lambda c: c.data == "status")
async def status_callback(callback: types.CallbackQuery):
    await bot.answer_callback_query(callback.id)
    message = my_pet.status()
    await bot.send_message(callback.from_user.id, f"–°—Ç–∞—Ç—É—Å {my_pet.name}:\n{message}")
    await show_main_menu(callback.message)

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
